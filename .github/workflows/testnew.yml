#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# https://github.com/liwenjie119/Actions-OpenWrt/blob/main/.github/workflows/build-openwrt-cc.yml

name: test Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    # 1. 检查服务器性能
    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(grep "physical id" /proc/cpuinfo | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(grep "model name" /proc/cpuinfo | awk -F: '{print $2}' | sort | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        sudo lshw -short -C memory | grep GiB
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    # 2. 优化磁盘空间，排除必要的目录和文件
    - name: "Optimize Disk Space"
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.0"
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
          ^diy-part1\.sh$
          ^diy-part2\.sh$
          ^workdir/openwrt/.*$
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    # 3. 进一步优化磁盘空间
    - name: Freeing up disk space
      uses: easimon/maximize-build-space@master
      with: 
        root-reserve-mb: 2048
        swap-size-mb: 1
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    # 4. 显示磁盘使用情况
    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    # 5. 初始化环境（安装 Clang 14）
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        set -e  # 遇到错误时退出

        # 清理不必要的文件和目录
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android

        # 保持 grub-efi-amd64-signed 包不被更新
        sudo -E apt-mark hold grub-efi-amd64-signed

        # 移除不需要的包，包括所有现有的 Clang 版本
        sudo -E apt -y purge llvm* clang* azure-cli* docker* ghc* zulu* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* snap*

        # 更新系统
        sudo -E apt -y full-upgrade

        # 安装必要的工具以添加 LLVM 仓库
        sudo -E apt -y install wget gnupg lsb-release software-properties-common

    # 6. 添加 LLVM 仓库并安装 Clang 14
    - name: Add LLVM APT repository and install Clang 14
      run: |
        set -e  # 遇到错误时退出

        # 手动添加 LLVM 官方 APT 仓库
        wget https://apt.llvm.org/llvm-snapshot.gpg.key
        sudo apt-key add llvm-snapshot.gpg.key
        sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main"

        # 更新包列表
        sudo -E apt-get -qq update

        # 安装 Clang 14 和 Clang++ 14
        sudo apt-get -qq install clang-14 clang++-14

        # 设置 clang 和 clang++ 的替代项为 Clang 14
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-14 100

        # 强制将 clang 和 clang++ 指向 Clang 14
        sudo update-alternatives --set clang /usr/bin/clang-14
        sudo update-alternatives --set clang++ /usr/bin/clang++-14

        # 验证 Clang 版本
        clang --version
        clang++ --version

        # 删除不再需要的 GPG 密钥文件
        rm llvm-snapshot.gpg.key

    # 7. 安装 OpenWrt 编译依赖项
    - name: Install OpenWrt compile dependencies
      run: |
        sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/coolsnowwolf/lede/master/scripts/feeds/depends-ubuntu-2004)

    # 8. 重新克隆源代码到 /workdir/openwrt
    - name: Clone source code
      working-directory: /workdir
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    # 9. 验证脚本文件存在
    - name: Verify scripts exist
      run: |
        ls -la $GITHUB_WORKSPACE/openwrt
        [ -e $GITHUB_WORKSPACE/openwrt/$DIY_P1_SH ] && echo "$DIY_P1_SH exists"
        [ -e $GITHUB_WORKSPACE/openwrt/$DIY_P2_SH ] && echo "$DIY_P2_SH exists"

    # 10. 加载自定义 feeds
    - name: Load custom feeds
      run: |
        [ -e openwrt/$FEEDS_CONF ] && mv openwrt/$FEEDS_CONF openwrt/feeds.conf.default
        chmod +x openwrt/$DIY_P1_SH
        cd openwrt
        ./$DIY_P1_SH

    # 11. 更新 feeds
    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    # 12. 安装 feeds
    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    # 13. 加载自定义配置
    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x openwrt/$DIY_P2_SH
        cd openwrt
        ./ $DIY_P2_SH

    # 14. SSH 连接到 Actions
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    # 15. 下载包
    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j16
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    # 16. 编译固件
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    # 17. 检查空间使用情况
    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    # 18. 上传 bin 目录
    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    # 19. 组织文件
    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    # 20. 上传固件目录
    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    # 21. 上传固件到 cowtransfer
    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    # 22. 上传固件到 WeTransfer
    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

    # 23. 生成 release tag
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"

    # 24. 上传固件到 release
    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    # 25. 删除 workflow 运行记录
    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    # 26. 移除旧的 Releases
    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
